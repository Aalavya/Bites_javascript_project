/* The `.add-recipe-window` class is defining the styles for a modal window that is used to add a
recipe. */
.add-recipe-window {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100rem;
  background-color: white;
  border-radius: 9px;

  padding: 5rem 6rem;
  box-shadow: 0 4rem 6rem rgba(0, 0, 0, 0.25);
  z-index: 1000;
  transition: all 0.5s;

  .btn--close-modal {
    font-family: inherit;
    color: inherit;
    position: absolute;
    top: 0.5rem;
    right: 1.6rem;
    font-size: 3.5rem;
    cursor: pointer;
    border: none;
    background: none;
  }
}
/* The `.overlay` class is defining the styles for a semi-transparent overlay that is used to create a
modal effect. It covers the entire screen and has a background color of rgba(0, 0, 0, 0.4), which is
a black color with 40% opacity. The `backdrop-filter` property is used to apply a blur effect to the
overlay. It has a `z-index` of 100 to ensure it appears above other elements on the page. The
`transition` property is used to specify the duration and timing function for the transition effect
when the overlay is shown or hidden. */

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.4);
  backdrop-filter: blur(4px);
  z-index: 100;
  transition: all 0.5s;
}
/* The `.hidden` class is defining styles to hide an element. It sets the `visibility` property to
`hidden`, which makes the element invisible but still takes up space on the page. It also sets the
`opacity` property to `0`, which makes the element completely transparent. This combination of
properties effectively hides the element from view. */

.hidden {
  visibility: hidden;
  opacity: 0;
}
/* The code you provided is written in SCSS (Sass), which is a preprocessor scripting language that is
compiled into CSS. */

.upload {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem 6rem;

  &__column {
    display: grid;
    grid-template-columns: 1fr 2.8fr;
    align-items: center;
    gap: 1.5rem;

    & label {
      font-size: 1.5rem;
      font-weight: 600;
      color: inherit;
    }

   /* The code `& input { ... }` is defining the styles for an input element within the `.upload`
   class. */
    & input {
      font-size: 1.5rem;
      padding: 0.8rem 1rem;
      border: 1px solid #ddd;
      border-radius: 0.5rem;
      transition: all 0.2s;

      &::placeholder {
        color: $color-grey-light-3;
      }

      &:focus {
        outline: none;
        border: 1px solid $color-primary;
        background-color: $color-grey-light-1;
      }
    }
/* The code `& button` is selecting a button element that is a child of an element with the class
`.upload__column`. It then applies the following styles to that button: */

    & button {
      grid-column: 1 / span 2;
      justify-self: center;
      margin-top: 1rem;
    }
  }
/* The code you provided is defining styles for two elements within the `.upload` class:
`.upload__heading` and `.upload__btn`. */

  &__heading {
    font-size: 2.25rem;
    font-weight: 700;
    text-transform: uppercase;
    margin-bottom: 1rem;
    grid-column: 1/-1;
  }

  &__btn {
    grid-column: 1 / -1;
    justify-self: center;
  }
}
